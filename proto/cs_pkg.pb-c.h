/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: cs_pkg.proto */

#ifndef PROTOBUF_C_cs_5fpkg_2eproto__INCLUDED
#define PROTOBUF_C_cs_5fpkg_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _LoginPkg LoginPkg;
typedef struct _LocReportPkg LocReportPkg;
typedef struct _HeadPkg HeadPkg;
typedef struct _BodyPkg BodyPkg;
typedef struct _CsPkg CsPkg;


/* --- enums --- */


/* --- messages --- */

struct  _LoginPkg
{
  ProtobufCMessage base;
  int32_t msg_id;
  char *username;
  char *password;
};
#define LOGIN__PKG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login__pkg__descriptor) \
    , 0, NULL, NULL }


struct  _LocReportPkg
{
  ProtobufCMessage base;
  int32_t msg_id;
  int32_t x_loc;
  int32_t y_loc;
};
#define LOC__REPORT__PKG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&loc__report__pkg__descriptor) \
    , 0, 0, 0 }


struct  _HeadPkg
{
  ProtobufCMessage base;
  int32_t msg_id;
};
#define HEAD__PKG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&head__pkg__descriptor) \
    , 0 }


struct  _BodyPkg
{
  ProtobufCMessage base;
  LoginPkg *login_pkg;
  LocReportPkg *loc_report_pkg;
};
#define BODY__PKG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&body__pkg__descriptor) \
    , NULL, NULL }


struct  _CsPkg
{
  ProtobufCMessage base;
  HeadPkg *head_pkg;
  BodyPkg *body_pkg;
};
#define CS__PKG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cs__pkg__descriptor) \
    , NULL, NULL }


/* LoginPkg methods */
void   login__pkg__init
                     (LoginPkg         *message);
size_t login__pkg__get_packed_size
                     (const LoginPkg   *message);
size_t login__pkg__pack
                     (const LoginPkg   *message,
                      uint8_t             *out);
size_t login__pkg__pack_to_buffer
                     (const LoginPkg   *message,
                      ProtobufCBuffer     *buffer);
LoginPkg *
       login__pkg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login__pkg__free_unpacked
                     (LoginPkg *message,
                      ProtobufCAllocator *allocator);
/* LocReportPkg methods */
void   loc__report__pkg__init
                     (LocReportPkg         *message);
size_t loc__report__pkg__get_packed_size
                     (const LocReportPkg   *message);
size_t loc__report__pkg__pack
                     (const LocReportPkg   *message,
                      uint8_t             *out);
size_t loc__report__pkg__pack_to_buffer
                     (const LocReportPkg   *message,
                      ProtobufCBuffer     *buffer);
LocReportPkg *
       loc__report__pkg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   loc__report__pkg__free_unpacked
                     (LocReportPkg *message,
                      ProtobufCAllocator *allocator);
/* HeadPkg methods */
void   head__pkg__init
                     (HeadPkg         *message);
size_t head__pkg__get_packed_size
                     (const HeadPkg   *message);
size_t head__pkg__pack
                     (const HeadPkg   *message,
                      uint8_t             *out);
size_t head__pkg__pack_to_buffer
                     (const HeadPkg   *message,
                      ProtobufCBuffer     *buffer);
HeadPkg *
       head__pkg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   head__pkg__free_unpacked
                     (HeadPkg *message,
                      ProtobufCAllocator *allocator);
/* BodyPkg methods */
void   body__pkg__init
                     (BodyPkg         *message);
size_t body__pkg__get_packed_size
                     (const BodyPkg   *message);
size_t body__pkg__pack
                     (const BodyPkg   *message,
                      uint8_t             *out);
size_t body__pkg__pack_to_buffer
                     (const BodyPkg   *message,
                      ProtobufCBuffer     *buffer);
BodyPkg *
       body__pkg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   body__pkg__free_unpacked
                     (BodyPkg *message,
                      ProtobufCAllocator *allocator);
/* CsPkg methods */
void   cs__pkg__init
                     (CsPkg         *message);
size_t cs__pkg__get_packed_size
                     (const CsPkg   *message);
size_t cs__pkg__pack
                     (const CsPkg   *message,
                      uint8_t             *out);
size_t cs__pkg__pack_to_buffer
                     (const CsPkg   *message,
                      ProtobufCBuffer     *buffer);
CsPkg *
       cs__pkg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cs__pkg__free_unpacked
                     (CsPkg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LoginPkg_Closure)
                 (const LoginPkg *message,
                  void *closure_data);
typedef void (*LocReportPkg_Closure)
                 (const LocReportPkg *message,
                  void *closure_data);
typedef void (*HeadPkg_Closure)
                 (const HeadPkg *message,
                  void *closure_data);
typedef void (*BodyPkg_Closure)
                 (const BodyPkg *message,
                  void *closure_data);
typedef void (*CsPkg_Closure)
                 (const CsPkg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor login__pkg__descriptor;
extern const ProtobufCMessageDescriptor loc__report__pkg__descriptor;
extern const ProtobufCMessageDescriptor head__pkg__descriptor;
extern const ProtobufCMessageDescriptor body__pkg__descriptor;
extern const ProtobufCMessageDescriptor cs__pkg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_cs_5fpkg_2eproto__INCLUDED */
